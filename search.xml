<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js-download-openwindow]]></title>
    <url>%2F2019%2F09%2F27%2Fjs-download-openwindow%2F</url>
    <content type="text"><![CDATA[业务经常有导出报表的场景，一般做法时后端组织数据生成文件后，前端调用接口进行下载。前端下载最简单的一种方式就是利用open window(url)进行下载。但是如果需要传递参数，简单的open(url)就显得捉襟见肘了。本次code demo展示了使用open window时使用js生成隐藏表单，然后发送请求从而达到目的 关键字 Code Repository download-file by openwindow js nodejs 一些公共方法12345678910111213141516171819202122232425262728293031323334// 生成隐藏表单generateHideForm (url) &#123; let tempForm = document.createElement('form') tempForm.id = 'tempForm1' tempForm.method = 'post' tempForm.action = url tempForm.target = '_blank' // 打开新页面 return tempForm&#125;,// 生成表单元素generateHideElement (name, value) &#123; let tempInput = document.createElement('input') tempInput.type = 'hidden' tempInput.name = name tempInput.value = value return tempInput&#125;,// 提交表单submitForm(tempForm) &#123; if (document.all) &#123; tempForm.attachEvent('onsubmit', () =&gt; &#123; &#125;) // IE &#125; else &#123; tempForm.addEventListener('submit', () =&gt; &#123; &#125;, false) // firefox &#125; document.body.appendChild(tempForm) if (document.all) &#123; tempForm.fireEvent('onsubmit') &#125; else &#123; // eslint-disable-next-line no-undef tempForm.dispatchEvent(new Event('submit')) &#125; tempForm.submit() document.body.removeChild(tempForm)&#125; 使用1234567891011121314151617181920// 一个表单元素exportSelectCompany () &#123; let url = 'api/exports/xxxx' let tempForm = this.generateHideForm(url) let hideInput1 = this.generateHideElement('codeList', [your list]) tempForm.appendChild(hideInput1) this.submitForm(tempForm)&#125;// 多个表单元素exportAllCompany () &#123; let url = 'api/exports/yyyy' let tempForm = this.generateHideForm(url) Object.keys(this.form).forEach(key =&gt; &#123; if (this.form[key] !== null &amp;&amp; this.form.param[key] !== undefined) &#123; let hideInput1 = this.generateHideElement(key, this.form.param[key]) tempForm.appendChild(hideInput1) &#125; &#125;) this.submitForm(tempForm)&#125; 总结:]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>js</tag>
        <tag>download-file by openwindow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-watermark]]></title>
    <url>%2F2019%2F09%2F27%2Fjs-watermark%2F</url>
    <content type="text"><![CDATA[本次code demo展示了在前端如何增加水印 关键字 Code Repository js watermark 普通html中增加水印1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;水印&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="warp"&gt; &lt;div class="title"&gt;我是标题&lt;/div&gt; &lt;div class="content"&gt; 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 我是内容我是内容我是内容我是内容我是内容我是内容 &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script&gt; function addWaterMarker(str) &#123; var can = document.createElement('canvas'); var body = document.body; body.appendChild(can); can.width = 400; //画布的宽 can.height = 200;//画布的高度 can.style.display = 'none'; var cans = can.getContext('2d'); cans.rotate(-20 * Math.PI / 180); //画布里面文字的旋转角度 cans.font = "16px Microsoft JhengHei"; //画布里面文字的字体 cans.fillStyle = "rgba(17, 17, 17, 0.50)";//画布里面文字的颜色 cans.textAlign = 'left'; //画布里面文字的水平位置 cans.textBaseline = 'Middle'; //画布里面文字的垂直位置 cans.fillText(str, can.width / 3, can.height / 2); //画布里面文字的间距比例 body.style.backgroundImage = "url(" + can.toDataURL("image/png") + ")"; //把画布插入到body中 &#125; //调用这个方法即可 addWaterMarker("水印");&lt;/script&gt; Vue项目在页面添加水印功能创建watermark.js文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556let watermark = &#123;&#125;let setWatermark = (str) =&gt; &#123; let id = &apos;1.23452384164.123412416&apos;; if (document.getElementById(id) !== null) &#123; document.body.removeChild(document.getElementById(id)); &#125; //创建一个画布 let can = document.createElement(&apos;canvas&apos;); //设置画布的长宽 can.width = 120; can.height = 120; let cans = can.getContext(&apos;2d&apos;); //旋转角度 cans.rotate(-15 * Math.PI / 180); cans.font = &apos;18px Vedana&apos;; //设置填充绘画的颜色、渐变或者模式 cans.fillStyle = &apos;rgba(200, 200, 200, 0.80)&apos;; //设置文本内容的当前对齐方式 cans.textAlign = &apos;left&apos;; //设置在绘制文本时使用的当前文本基线 cans.textBaseline = &apos;Middle&apos;; //在画布上绘制填色的文本（输出的文本，开始绘制文本的X坐标位置，开始绘制文本的Y坐标位置） cans.fillText(str, can.width / 8, can.height / 2); let div = document.createElement(&apos;div&apos;); div.id = id; div.style.pointerEvents = &apos;none&apos;; div.style.top = &apos;30px&apos;; div.style.left = &apos;0px&apos;; div.style.position = &apos;fixed&apos;; div.style.zIndex = &apos;100000&apos;; div.style.width = document.documentElement.clientWidth + &apos;px&apos;; div.style.height = document.documentElement.clientHeight + &apos;px&apos;; div.style.background = &apos;url(&apos; + can.toDataURL(&apos;image/png&apos;) + &apos;) left top repeat&apos;; document.body.appendChild(div); return id;&#125;// 该方法只允许调用一次watermark.set = (str) =&gt; &#123; let id = setWatermark(str); setInterval(() =&gt; &#123; if (document.getElementById(id) === null) &#123; id = setWatermark(str); &#125; &#125;, 500); window.onresize = () =&gt; &#123; setWatermark(str); &#125;;&#125;export default watermark; 使用123456// 在App.vue文件中，导入该文件import Watermark from &apos;@/common/js/watermark&apos;; //路径不要写错// 在mounted函数中调用mounted: function () &#123; Watermark.set(&quot;水印内容&quot;)&#125; 补充 一般我们的水印内容是当前用户的id或者姓名，在App.vue文件的mounted函数中有可能获取不到Vuex的用户信息.我们一般在路由跳转的时候来进行用户的登录和权限的判断，所以我们可以将调用水印的方法放在router.afterEach()方法中，在router.beforeEach（）方法中判断用户的登录和权限的判断，所以router.afterEach()方法中一定可以获取到vuex中的用户信息。 123456789101112131415161718192021222324252627282930router.beforeEach((to, from, next) =&gt; &#123; // 登录判断 store.dispatch(&apos;getuser&apos;).then((user) =&gt; &#123; if (to.path === &apos;/&apos;) &#123; if (user.isLeader) &#123; next(&apos;/Summary&apos;); &#125; else &#123; next(&apos;/list&apos;); &#125; &#125; else &#123; next(); &#125; &#125;).catch((error) =&gt; &#123; if (error.message === &apos;noUser&apos;) &#123; //返回登录界面 &#125; else &#123; Dialog.confirm(&#123; title: &apos;服务器错误&apos;, message: &apos;获取用户信息失败,可尝试重新进入系统。&apos;, showCancelButton: false, showConfirmButton: false &#125;); &#125; &#125;);&#125;);router.afterEach((to) =&gt; &#123; /* 路由发生变化修改页面title */ if (to.meta.title) &#123; changTitle(to.meta.title); &#125; Watermark.set(store.state.user.userId);&#125;); 总结: 还要注意层级关系，在vue中直接向普通html引入，很可能会由于路由跳转等问题造成水印被覆盖。]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>js</tag>
        <tag>watermark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[electron-autoUpdater]]></title>
    <url>%2F2019%2F09%2F11%2Felectron-autoUpdate%2F</url>
    <content type="text"><![CDATA[本次code demo展示了electron自动更新一种最常用最基本的方式。 关键字 Code Repository electron autoUpdater nodejs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import &#123;ipcMain&#125; from 'electron'// 注意这个autoUpdater不是electron中的autoUpdaterimport &#123;autoUpdater&#125; from "electron-updater"/** * Auto Updater * * Uncomment the following code below and install `electron-updater` to * support auto updating. Code Signing with a valid certificate is required. * https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-electron-builder.html#auto-updating */// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写export const updateHandle = (mainWindow) =&gt; &#123; let message = &#123; error: 'An error occurred while checking for updates', checking: 'Checking for updates……', updateAva: 'A new version has been detected and is being downloaded……', updateNotAva: 'It is the latest version, no need to update', &#125;; // package.json文件中publish 实际不起作用 autoUpdater.setFeedURL('http://xxx.com:8080' + '/'); autoUpdater.on('error', function (error) &#123; sendUpdateMessage(mainWindow, 'error', message.error) &#125;); autoUpdater.on('checking-for-update', function () &#123; sendUpdateMessage(mainWindow, 'checking-for-update', message.checking) &#125;); autoUpdater.on('update-available', function (info) &#123; sendUpdateMessage(mainWindow, 'update-available', message.updateAva) &#125;); autoUpdater.on('update-not-available', function (info) &#123; sendUpdateMessage(mainWindow, 'update-not-available', message.updateNotAva) &#125;); // 更新下载进度事件 autoUpdater.on('download-progress', function (progressObj) &#123; mainWindow.webContents.send('downloadProgress', progressObj) &#125;) autoUpdater.on('update-downloaded', function (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) &#123; ipcMain.on('updateNow', (e, arg) =&gt; &#123; console.log("[UPDATER] begin..."); //some code here to handle event autoUpdater.quitAndInstall(); &#125;); mainWindow.webContents.send('isUpdateNow') &#125;); ipcMain.on("checkForUpdate", () =&gt; &#123; //执行自动更新检查 autoUpdater.checkForUpdates(); &#125;)&#125;// 通过main进程发送事件给renderer进程，提示更新信息function sendUpdateMessage(mainWindow, type, text) &#123; mainWindow.webContents.send('updater-message', type, text)&#125; 总结:autoUpdater需要配合electron-builder进行打包，electron-builder打包后会生成exe文件（推荐使用nsis），以及latest.yml。打包后将两个文件放置合适位置或服务器上。autoUpdater会根据配置路径查询latest.yml文件，并和当前version（package.json中version）做对比，当前版本较低时就会自动下载去并更新 需要注意的几个细节： 检测到有新版本时会自动下载，下载完即可自动安装 可使用主进程和渲染进程通信，控制是否自动安装 autoUpdater检测新版本通信不是基于http的，最重要是无状态的，即不能携带cookie等认证]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>electron</tag>
        <tag>autoUpdater</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[h5-css-hover-model]]></title>
    <url>%2F2019%2F09%2F11%2Fh5-css-hover-model%2F</url>
    <content type="text"><![CDATA[本次code demo展示了前端样式的使用，前端很多情况下需要hover层进行其他操作，本次介绍一种基于css的解决方案。 关键字 Code Repository Html Css hover 123456789101112131415161718192021222324252627282930313233343536 // 父容器 &lt;div class="parent-card"&gt; // 此处是未hover时正常代码 &lt;div class="card-hover"&gt; // 此处未hover时div元素内容 &lt;/div&gt; &lt;/div&gt;css部分.contact-card &#123; position: relative; max-width: 200px; max-height: 100px; hover时激活 &amp;:hover&#123; .card-hover&#123; display: block; &#125; &#125; hover样式 .card-hover&#123; display: none; position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgba(116,195,185,.9); z-index: 11; text-align: center; &#125; &#125; 总结: 一般情况下将hover dom写于父容器之中，利用position定位父元素。另外激活hover可以是其它需要的元素]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>Html</tag>
        <tag>Css</tag>
        <tag>hover</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pako-demo]]></title>
    <url>%2F2019%2F09%2F03%2Fjs-pako-demo%2F</url>
    <content type="text"><![CDATA[本次code demo展示了在前端如何使用pako进行数据压缩以及解压缩 关键字 Code Repository zip js pako 12345678910111213141516171819202122232425262728293031323334353637383940414243import pako from 'pako'// 压缩export const zip = (str) =&gt; &#123; let binaryString = pako.gzip(encodeURIComponent(str), &#123; to: 'string' &#125;) return btoa(binaryString)&#125;// 解压缩export const unzip = (sourceDate) =&gt; &#123; let strData = atob(sourceDate) // Convert binary string to character-number array let charData = strData.split('').map(function (x) &#123; return x.charCodeAt(0) &#125;) // Turn number array into byte-array let binData = new Uint8Array(charData) // // unzip let data = pako.inflate(binData) // Convert gunzipped byteArray back to ascii string: // 使用handleCodePoints防止堆栈溢出，原理未知，参考：https://www.jianshu.com/p/0d5791718b52 // strData = String.fromCharCode.apply(null, new Uint16Array(data)) strData = handleCodePoints(data) return decodeURIComponent(strData)&#125;function handleCodePoints (array) &#123; let CHUNK_SIZE = 0x8000 // arbitrary number here, not too small, not too big let index = 0 let length = array.length let result = '' let slice let arr = [] for (let i = 0, _i = array.length; i &lt; _i; i++) &#123; arr[i] = array[i] &#125; while (index &lt; length) &#123; slice = arr.slice(index, Math.min(index + CHUNK_SIZE, length)) // `Math.min` is not really necessary here I think result += String.fromCharCode.apply(null, slice) index += CHUNK_SIZE &#125; return result&#125; 总结:对于内容太多的解压缩会出现堆栈溢出的情况，所以需要用handleCodePoints去处理一下，详细情况请参阅https://www.jianshu.com/p/0d5791718b52 以下摘录部分原文：通过一般方式，可以正确解析数据，但是当数据量过大时，pako会报错误Maximumcallstacksizeexceeded;所以需要handleCodePoints方式处理，即将所有数据进行循环分块解析]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>js</tag>
        <tag>zip</tag>
        <tag>pako</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生js复制内容到剪切板]]></title>
    <url>%2F2019%2F09%2F02%2Fjs-clipboard-copy%2F</url>
    <content type="text"><![CDATA[关键字 Code Repository js clipboard 1234567891011121314execCoy(text) &#123; const input = document.createElement('INPUT'); input.style.opacity = 0; input.style.position = 'absolute'; input.style.left = '-100000px'; document.body.appendChild(input); input.value = text; input.select(); input.setSelectionRange(0, text.length); document.execCommand('copy'); document.body.removeChild(input); return true;&#125; 利用一个不可见input，将要复制的文本写入value，再执行setSelectionRange选中，然后执行document.execCommand(‘copy’)将value写入系统剪切板。]]></content>
      <categories>
        <category>Code Repository</category>
      </categories>
      <tags>
        <tag>Code Repository</tag>
        <tag>js</tag>
        <tag>clipboard</tag>
      </tags>
  </entry>
</search>
